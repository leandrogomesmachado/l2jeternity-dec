package jonelo.jacksum.ui;

import java.io.File;
import java.util.Date;
import java.util.Properties;
import java.util.StringTokenizer;
import jonelo.jacksum.JacksumAPI;
import jonelo.sugar.util.Version;

public class MetaInfo {
   private boolean _r = false;
   private boolean _p = false;
   private boolean _A = false;
   private String timestampFormat = null;
   private char filesep = File.separatorChar;
   private int grouping = 0;
   private char groupChar = ' ';
   private String algorithm = null;
   private String encoding = "";
   private String separator = null;
   private String commentchars = "Jacksum: Comment:";
   private Properties props = null;
   public static final String METAINFO = "Jacksum: Meta-Info: ";

   public MetaInfo() {
      this.props = new Properties();
   }

   public MetaInfo(String var1) throws MetaInfoVersionException {
      this.props = new Properties();
      this.parse(var1);
   }

   public void parse(String var1) throws MetaInfoVersionException {
      Object var2 = null;
      StringTokenizer var3 = new StringTokenizer(var1.substring("Jacksum: Meta-Info: ".length()), ";");

      while(var3.hasMoreTokens()) {
         StringTokenizer var7 = new StringTokenizer(var3.nextToken(), "=");
         this.props.setProperty(var7.nextToken(), var7.hasMoreTokens() ? var7.nextToken() : "");
      }

      if (new Version(this.props.getProperty("version")).compareTo(JacksumAPI.getVersion()) > 0) {
         throw new MetaInfoVersionException(
            "The file was generated by a newer version of Jacksum.\nUpgrade to the latest Jacksum release, at least to version "
               + this.props.getProperty("version")
         );
      } else {
         if (new Version(this.props.getProperty("version")).compareTo(new Version("1.6.0")) < 0) {
            this.props.setProperty("fieldsep", "\t");
         }

         this._A = false;
         this._r = false;
         this._p = false;
         this._r = false;
         String var4 = this.props.getProperty("flags", "");

         for(int var5 = 0; var5 < var4.length(); ++var5) {
            if (var4.charAt(var5) == 'A') {
               this._A = true;
            } else if (var4.charAt(var5) == 'x') {
               this.encoding = "hex";
            } else if (var4.charAt(var5) == 'X') {
               this.encoding = "hexup";
            } else if (var4.charAt(var5) == 'r') {
               this._r = true;
            } else if (var4.charAt(var5) == 'p') {
               this._p = true;
            }
         }

         if (this.props.getProperty("encoding") != null && this.props.getProperty("encoding").length() != 0) {
            this.encoding = this.props.getProperty("encoding");
         } else {
            this.encoding = null;
         }

         this.algorithm = this.props.getProperty("algorithm", "sha1");
         if (this.algorithm.equals("whirlpool") && new Version(this.props.getProperty("version")).compareTo(new Version("1.6.0")) < 0) {
            this.algorithm = "whirlpool1";
         }

         if (this.props.getProperty("fieldsep") != null && this.props.getProperty("fieldsep").length() != 0) {
            this.separator = this.props.getProperty("fieldsep");
         } else {
            this.separator = null;
         }

         if (this.props.getProperty("group") != null && this.props.getProperty("group").length() != 0) {
            try {
               this.grouping = Integer.parseInt(this.props.getProperty("group"));
            } catch (NumberFormatException var6) {
               System.err.println("Jacksum: Warning: Ignoring the group value, because the value is invalid.");
               this.grouping = 0;
            }
         } else {
            this.grouping = 0;
         }

         if (this.props.getProperty("groupChar") != null && this.props.getProperty("groupChar").length() != 0) {
            this.groupChar = this.props.getProperty("groupChar").charAt(0);
         } else {
            this.groupChar = ' ';
         }

         if (this.props.getProperty("comment") != null && this.props.getProperty("comment").length() != 0) {
            this.setCommentchars(this.props.getProperty("comment"));
         } else {
            this.setCommentchars("Jacksum: Comment:");
         }

         if (this.props.getProperty("filesep") != null && this.props.getProperty("filesep").length() != 0) {
            this.filesep = this.props.getProperty("filesep").charAt(0);
         } else {
            this.filesep = File.separatorChar;
         }

         if (this.props.getProperty("tformat") != null && this.props.getProperty("tformat").length() != 0) {
            if (this.props.getProperty("tformat").equals("null")) {
               System.err.println("Jacksum: Can't determine timeformat (tformat=null), trying default (tformat=yyyyMMddHHmmss)");
               this.setTimestampFormat("yyyyMMddHHmmss");
            } else {
               this.setTimestampFormat(this.props.getProperty("tformat"));
            }
         } else {
            this.setTimestampFormat(null);
         }
      }
   }

   public void setAlgorithm(String var1) {
      this.algorithm = var1;
   }

   public String getAlgorithm() {
      return this.algorithm;
   }

   public void setVersion(String var1) {
      this.props.setProperty("version", var1);
   }

   public String getVersion() {
      return this.props.getProperty("version");
   }

   public void setRecursive(boolean var1) {
      this._r = var1;
   }

   public boolean isRecursive() {
      return this._r;
   }

   public void setEncoding(String var1) {
      this.encoding = var1;
   }

   public String getEncoding() {
      return this.encoding;
   }

   public boolean isEncoding() {
      return this.encoding != null;
   }

   public void setPathInfo(boolean var1) {
      this._p = var1;
   }

   public boolean isPathInfo() {
      return this._p;
   }

   public void setAlternate(boolean var1) {
      this._A = var1;
   }

   public boolean isAlternate() {
      return this._A;
   }

   public void setTimestampFormat(String var1) {
      this.timestampFormat = var1;
   }

   public String getTimestampFormat() {
      return this.timestampFormat;
   }

   public boolean isTimestampFormat() {
      return this.timestampFormat != null;
   }

   public void setGrouping(int var1) {
      this.grouping = var1;
   }

   public int getGrouping() {
      return this.grouping;
   }

   public boolean isGrouping() {
      return this.grouping > 0;
   }

   public void setGroupChar(char var1) {
      this.groupChar = var1;
   }

   public char getGroupChar() {
      return this.groupChar;
   }

   public void setSeparator(String var1) {
      this.separator = var1;
   }

   public String getSeparator() {
      return this.separator;
   }

   public boolean isSeparatorWanted() {
      return this.separator != null;
   }

   public void setCommentchars(String var1) {
      this.commentchars = var1;
   }

   public String getCommentchars() {
      return this.commentchars;
   }

   public void setFilesep(char var1) {
      this.filesep = var1;
   }

   public char getFilesep() {
      return this.filesep;
   }

   public String getComment() {
      StringBuffer var1 = new StringBuffer(240);
      var1.append(this.commentchars);
      var1.append(" created with ");
      var1.append("Jacksum");
      var1.append(" ");
      var1.append(JacksumAPI.getVersionString());
      var1.append(", http://jacksum.sourceforge.net");
      var1.append(System.getProperty("line.separator"));
      var1.append(this.commentchars);
      var1.append(" created on ");
      var1.append(new Date());
      var1.append(System.getProperty("line.separator"));
      var1.append(this.commentchars);
      var1.append(" os name=");
      var1.append(System.getProperty("os.name"));
      var1.append(";os version=");
      var1.append(System.getProperty("os.version"));
      var1.append(";os arch=");
      var1.append(System.getProperty("os.arch"));
      var1.append(System.getProperty("line.separator"));
      var1.append(this.commentchars);
      var1.append(" jvm vendor=");
      var1.append(System.getProperty("java.vm.vendor"));
      var1.append(";jvm version=");
      var1.append(System.getProperty("java.vm.version"));
      var1.append(System.getProperty("line.separator"));
      var1.append(this.commentchars);
      var1.append(" user dir=");
      var1.append(System.getProperty("user.dir"));
      return var1.toString();
   }

   public String toString() {
      StringBuffer var1 = new StringBuffer(100);
      var1.append("Jacksum: Meta-Info: ");
      var1.append("version=");
      var1.append(this.getVersion());
      var1.append(";");
      var1.append("algorithm=");
      var1.append(this.algorithm);
      var1.append(";");
      var1.append("filesep=");
      var1.append(this.filesep);
      var1.append(";");
      StringBuffer var2 = new StringBuffer(5);
      if (this._r) {
         var2.append('r');
      }

      if (this._p) {
         var2.append('p');
      }

      if (this._A) {
         var2.append('A');
      }

      if (var2.toString().length() > 0) {
         var1.append("flags=");
         var1.append(var2.toString());
         var1.append(";");
      }

      if (this.timestampFormat != null && this.timestampFormat.length() != 0) {
         var1.append("tformat=");
         var1.append(this.timestampFormat);
         var1.append(";");
      }

      if (this.grouping > 0) {
         var1.append("group=");
         var1.append(Integer.toString(this.grouping));
         var1.append(";");
         if (this.groupChar != ' ') {
            var1.append("groupChar=");
            var1.append(this.groupChar);
            var1.append(";");
         }
      }

      if (this.encoding != null && this.encoding.length() > 0) {
         var1.append("encoding=");
         var1.append(this.encoding);
         var1.append(";");
      }

      if (this.separator != null && !this.separator.equals("\t")) {
         var1.append("fieldsep=");
         var1.append(this.separator);
         var1.append(";");
      }

      if (this.commentchars.length() > 0 && !this.commentchars.equals("Jacksum: Comment:")) {
         var1.append("comment=");
         var1.append(this.commentchars);
         var1.append(";");
      }

      return var1.toString();
   }
}
